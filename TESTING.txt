Tests can be found under /pyTests

pyTests directory contains several files:

1. pyUnit.py: this is simply a module we created to output results to the user, similar to a JUnit test
    - run_test: takes in three inputs: actual, expected, and the test case we're running. Using these parameters it determines whether the test case is successful, if not it returns the actual and what is expected
    - display_graph: takes in the test name and asks the user if they want to view the test graph output. If yes, then a png of the current test case is created

2. (dfa|nfa)1.py: test cases for regex input 'a*'
    - parses the regex 'a*' and uses the code we generated to compute a valid nfa/dfa
    - the expected representation is then generated by us (and since there are multiple right answers for the same graph, we tailor the answer towards what our code should produce)
    - we then feed these variables into 'run_test' from pyUnit

    High overview of expected:
        - transition towards accepted state using 'a'
        - if entire string is not consumed, then run fails even if nfa is on accepted state
        - self loop on accepting state using 'a' transition

3. (dfa|nfa)2.py: test cases for regex input 'a+b'
    - parses the regex 'a+b' and uses the code we generated to compute a valid nfa/dfa
    - the expected representation is then generated by us (and since there are multiple right answers for the same graph, we tailor the answer towards what our code should produce)
    - we then feed these variables into 'run_test' from pyUnit

    High overview of expected:
        - two routes towards accepting state: 'a' and 'b' transitions
        - could either have two accepting transitions, or using episilong transitions make them converge towards a single accepting state

4. (dfa|nfa)3.py: test cases for regex input 'ab'
    - parses the regex 'ab' and uses the code we generated to compute a valid nfa/dfa
    - the expected representation is then generated by us (and since there are multiple right answers for the same graph, we tailor the answer towards what our code should produce)
    - we then feed these variables into 'run_test' from pyUnit

    High overview of expected:
        - a linear path starting with transition 'a', then a state, then another transition 'b' that brings us to the accepting state

5. (dfa|nfa)4.py: test cases for regex input 'ab*'
    - parses the regex 'ab*' and uses the code we generated to compute a valid nfa/dfa
    - the expected representation is then generated by us (and since there are multiple right answers for the same graph, we tailor the answer towards what our code should produce)
    - we then feed these variables into 'run_test' from pyUnit

    High overview of expected:
        - a transition that starts with 'a'
        - another transition using 'b'
        - a loop of some sort using 'b' transition on accepting state


*For each test, the user is given the option to show the test case graph. The graph will appear under /pyTests and will be of format test_case_name.png